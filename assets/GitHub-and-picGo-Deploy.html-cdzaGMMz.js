import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as e}from"./app-CIYqhmIy.js";const t={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<blockquote><p>作者注：建议使用Github替换Gitee。</p><p>作者两年亲身体验告诉大家，Github做图床十分靠谱！！有CDN加速访问巨快！！</p><p>别担心不稳定！别担心访问慢！这些问题统统不存在。</p></blockquote><h2 id="一、配置github" tabindex="-1"><a class="header-anchor" href="#一、配置github"><span>一、配置GitHub</span></a></h2><h3 id="_1-注册github账号" tabindex="-1"><a class="header-anchor" href="#_1-注册github账号"><span>1. 注册Github账号</span></a></h3><p>首先你需要一个github账号，如果没有的话，先注册。</p><p>github官网地址： <a href="https://link.zhihu.com/?target=https%3A//github.com/" target="_blank" rel="noopener noreferrer">https://github.com/</a></p><p>注册过程省略，因为这是保姆都不管的事情。</p><p>友情提示：可能在注册过程中会出现 “Unable to verify your captcha response… …”，一直不能正常注册。</p><p>网上有各种解决方案：换浏览器、换电脑… …</p><h3 id="_2-创建一个新仓库-用于存放图片" tabindex="-1"><a class="header-anchor" href="#_2-创建一个新仓库-用于存放图片"><span>2. 创建一个新仓库，用于存放图片</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-59b7f87b4fbe21a2492e4b9e529fe87c_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写仓库名称和描述，且仓库必须是public的，否则存储的图片不能正常访问。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d3733c14e8c9b53cb5cf9f7607d51c8a_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-生成一个token-用于picgo访问github" tabindex="-1"><a class="header-anchor" href="#_3-生成一个token-用于picgo访问github"><span>3. 生成一个token，用于picGo访问github</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4d227062bcfa58dba6c0582c982b737b_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择左侧菜单的Developer settings</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4d227062bcfa58dba6c0582c982b737b_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之后选择左侧Personal access tokens，再点击Generate new token</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-2d5bcabac97557591c4203009d306750_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写Note，勾选repo.</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-346da4ccf189eb5997abe2fadadca331_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意，生成的token只会在这里显示一次，所以记得单独保存下来哦。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-354ea85a4bd9cfc99157b86cae9a2332_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，Github的配置完成。</p><h2 id="二、下载picgo-并进行配置" tabindex="-1"><a class="header-anchor" href="#二、下载picgo-并进行配置"><span>二、下载picGo，并进行配置</span></a></h2><h3 id="_1-下载picgo" tabindex="-1"><a class="header-anchor" href="#_1-下载picgo"><span>1. 下载picGo</span></a></h3><p>网络不好的情况下，PicGo下载可能会多次失败，所以我把下载好的应用放在百度网盘了。</p><p>大家按需取用。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-279f576c0dc0861fd7edcf1d43e5675f_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>网盘地址：<a href="https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1LvkzLJyZcjpflK2Evq3X9A" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1LvkzLJyZcjpflK2Evq3X9A</a> 提取码：s6x7</p><p>下载完成，双击启动安装即可。</p><p>如果安装成功，picGo不能正常使用，则可以用兼容模式启动。【此问题因电脑而异，也是我在配置过程中踩过的坑。】</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-3f60ccb549e01c95a1702ceca9bda95d_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-配置picgo" tabindex="-1"><a class="header-anchor" href="#_2-配置picgo"><span>2. 配置picGo</span></a></h3><p>仓库名：[github用户名]/[第一步新建的仓库名称]</p><p>分支：默认master，从2020.10.01开始，github的默认分支名变更为main</p><p>设定token：第一步创建的token</p><p>指定存储路径：可填可不填，如果填写了，图片就会存储在img文件夹下</p><p>设定自定义域名：<a href="https://cdn.jsdelivr.net/gh/%5Bgithub%E7%94%A8%E6%88%B7%E5%90%8D%5D/%5B%E4%BB%93%E5%BA%93%E5%90%8D%5D@main%EF%BC%8C%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%AD%A4%E5%A4%84%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%80%E5%AE%9A%E8%A6%81%E5%A1%AB%E5%86%99@main%EF%BC%8C%E5%90%A6%E5%88%99%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8master%E5%88%86%E6%94%AF%E3%80%82%E8%80%8C%E7%8E%B0%E5%9C%A8github%E5%88%9B%E5%BB%BA%E7%9A%84%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D%E4%B8%BAmain%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%8C%87%E5%AE%9A%EF%BC%8C%E5%88%99%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82%E3%80%90%E8%B8%A9%E5%9D%91%E4%B8%A4%E5%B0%8F%E6%97%B6%E3%80%91" target="_blank" rel="noopener noreferrer">https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main，注意，此处的分支一定要填写@main，否则默认使用master分支。而现在github创建的默认分支名为main，如果不指定，则会出现图片不能上传的情况。【踩坑两小时】</a></p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-62e4faaa7999d1d32fa80aec44b4034e_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，github+picGo的配置完成，可以在上传区进行图片上传了。</p><h3 id="_3-补充说明" tabindex="-1"><a class="header-anchor" href="#_3-补充说明"><span>3. 补充说明</span></a></h3><p>1.原本github的自定义域名应该是：<a href="https://raw.githubusercontent.com/%5Busername%5D/%5B%E4%BB%93%E5%BA%93%E5%90%8D%5D" target="_blank" rel="noopener noreferrer">https://raw.githubusercontent.com/[username]/[仓库名]</a></p><p>但是使用这种方式访问图片巨慢，所以教程中使用了jsdelivr作为cdn加速。改变域名即可，不需要任何其他配置。</p><p>2.配置完成，可能出现不能上传的情况，请大家耐心检查，也许某一步的配置出现了问题，就像检查bug一样耐心、细心。想象一下图床搭建成功后，写起文章来的丝滑感，是不是又有动力了？</p><h2 id="三、备选-配置gitee" tabindex="-1"><a class="header-anchor" href="#三、备选-配置gitee"><span>三、备选-配置Gitee</span></a></h2><h3 id="_1-gitee设置" tabindex="-1"><a class="header-anchor" href="#_1-gitee设置"><span>1. Gitee设置</span></a></h3><p>安装好picgo后在picgo的插件设置搜索<code>gitee</code>然后选择安装gitee-uploader</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-b5d16df86a9dd216d75e06b57ffb9c12_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后到<a href="https://link.zhihu.com/?target=https%3A//gitee.com/" target="_blank" rel="noopener noreferrer">gitee</a>新建一个仓库用来做我们的图床</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-75f73b3c61eccc848c09c509ef51c6b8_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>新建仓库的要点如下：</p><ol><li><strong>输入一个仓库名称</strong></li><li><strong>其次将仓库设为公开</strong></li><li><strong>勾选使用Readme文件初始化这个仓库</strong></li></ol><p>起一个仓库的名字，按照下面的流程来创建，记得要公开</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-79d759f28a769709c478f2fc7ca4b59f_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-创建私人令牌" tabindex="-1"><a class="header-anchor" href="#_2-创建私人令牌"><span>2. 创建私人令牌</span></a></h3><p>点击头像进入设置然后点击私人令牌然后点击生成新令牌</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d4991c62c5e5733ed8d71ac0e214c687_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-72dc3cbb5136d7c49b691ace8d94444b_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-18f2eecd4f6c9c4091f5634dc041ca16_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入你的gitee登录密码</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-0a99d1f96cf97761ec0049ffb3d767a3_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-cd0242aaf5099ecd6371decfa6cc687a_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-在picgo中配置gitee图床" tabindex="-1"><a class="header-anchor" href="#_3-在picgo中配置gitee图床"><span>3. 在picgo中配置gitee图床</span></a></h3><p>进入picgo后点击图床设置点击gitee，然后在repo中填入之前我们创建的用户名/仓库名，这里的用户名要与你的个人空间地址一致，例如我的个人空间地址是zdqs，所以我这里就填写zdqs</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d43f961421502cd473ea24dbfef8452b_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>branch一般默认是master，token就写我们的私人令牌，path可以不写只要repo和token写了就行了</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4b1950c44d1a37a0497facfb55066501_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、picgo集成typora" tabindex="-1"><a class="header-anchor" href="#四、picgo集成typora"><span>四、PicGo集成Typora</span></a></h2><p>使用MarkDown语法写文章，我使用的编辑器是typora，一款超级好用的编辑器。在一个编辑框内，编辑完成后，可以马上显示MarkDown语法效果。</p><p>举个栗子：</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-ce0b207c19d6ca32ac22937f1dc6cfcd_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>并且typora可以和picGo联合在一起使用，当你在编辑器中插入、粘贴图片时，typora+picGo的组合方式，可以自动把图片上传至github保存。</p><h3 id="_1-下载安装typora" tabindex="-1"><a class="header-anchor" href="#_1-下载安装typora"><span>1. 下载安装Typora</span></a></h3><p>Typora新版本是收费的，所以建议大家使用旧版本就可以了，完全能满足写作需求。</p><p>旧版本安装包和picGo放在一起了（下载地址见上文），大家按需取用即可。</p><p>下载完成后正常步骤安装即可。</p><h3 id="_2-配置typora" tabindex="-1"><a class="header-anchor" href="#_2-配置typora"><span>2. 配置Typora</span></a></h3><p>在typora顶部菜单界面，选择“文件” - &gt; “偏好设置”，设置图片存储方式。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-f595cf5c8a0e3b62944c68deb8fb5878_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择图片存储方式：上传图片。</p><p>上传服务：PicGo(app)</p><p>PicGo路径：picGo安装的地址</p><p>设置完成，点击“验证图片上传”，提示上传成功，即代表配置成功。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-e27e9f198aef7bdea365549b2257025d_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意一点，typora图片验证中的端口，需要与picGo中的server设置内的端口一致，否则typora中不能正常上传。</p><h3 id="_3-picgo监听端口设置" tabindex="-1"><a class="header-anchor" href="#_3-picgo监听端口设置"><span>3. picGo监听端口设置</span></a></h3><p>选择“PicGo设置”–&gt;“设置server”</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-8ff622935a6b0597a21e68e7575e16ef_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【此处有坑】如果监听端口不是36677，则需要修改为36677。否则会出现picGo能正常上传 图片，而typora上传图片失败的情况。</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-304589efaed9a1ba3caf5e8827e77582_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后，在苹果电脑中可以使用<strong>Typora+Ipic+Github</strong>的方式，有兴趣的话可以自行尝试</p><p><strong>总结：github+picGo+typora他们三个是好基友。</strong></p><h2 id="五、picgo集成obsidian-paste-image-rename" tabindex="-1"><a class="header-anchor" href="#五、picgo集成obsidian-paste-image-rename"><span>五、picGo集成Obsidian - Paste Image Rename</span></a></h2><h3 id="_1-效果综述" tabindex="-1"><a class="header-anchor" href="#_1-效果综述"><span>1. 效果综述</span></a></h3><p>目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 <code>890 Attachments</code> 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是<strong>方便跨文件引用以及安全隐私</strong>。但存在的弊端也很明显：<strong>随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦</strong>。这时可以考虑 webp 化或者干脆直接图床化。</p><p>刚好有朋友遇到这个问题，需要将 Vault 里的全部本地图片转为图床链接，解决思路的话比较清晰，相信大家都能想得到：</p><ol><li>上传全部图片到图床；</li><li>替换文件引用链接。</li></ol><p>那就以一个示例文件夹 <code>ob</code> 为例，尝试实现所有图片的图床化。</p><h3 id="_2-上传图片" tabindex="-1"><a class="header-anchor" href="#_2-上传图片"><span>2. 上传图片</span></a></h3><p>这里我们需要借助一个插件：<strong>“Image auto upload”</strong>，可以将图片上传到 PicGo 中配置的图床。</p><figure><img src="https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>若勾选最后一个选项，图片上传图床后会被删除！！！</p><p>虽然插件只能上传一个文件中的所有图像文件，但也足够让我们打开思路了：<strong>那就把图片都丢到一个文件里</strong>！</p><p>文件夹内创建文件 <code>attachments.md</code>，运行这段 python 脚本：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> glob</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 获取当前目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_dir </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getcwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 获取所有图片文件路径</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> image_files </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> glob.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(current_dir, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;*.jpg&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               glob.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(current_dir, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;*.jpeg&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               glob.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(current_dir, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;*.png&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可根据需要添加其他图片格式的glob语句</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 遍历图片文件，并将文件名添加到attachments.md文件中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;attachments.md&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;w&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> image_file </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> image_files:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         image_filename </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">basename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(image_file)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">         file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;![[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">image_filename</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">]]</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后会得到以下效果：</p><figure><img src="https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图片汇总</p><p>然后回到 Obsidian 按 <code>Ctrl-P</code> 调出命令面板，执行 <code>Image auto upload Plugin: Upload all images</code> 后会自动替换成图床链接：</p><figure><img src="https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上传后自动替换链接</p><h3 id="_3-替换文件引用链接" tabindex="-1"><a class="header-anchor" href="#_3-替换文件引用链接"><span>3. 替换文件引用链接</span></a></h3><p>重新读取 <code>attachments.md</code>，获取图片名与图床链接的对应关系并存储为字典：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 定义正则表达式模式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\!\\[</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\]\\(</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\)</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 以utf-8编码读取attachments.md文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;attachments.md&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 创建空字典</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> img_dict </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 使用正则表达式匹配并存储图片信息到字典中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> matches </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">findall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pattern, content)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> match </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> matches:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     img_name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> match[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     img_link </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> match[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     img_dict[img_name] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> img_link</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要来遍历整个 Vault 并进行图片引用链接的替换，首先需要注意的是 Obsidian 存在两种引用内部图片的格式：</p><ul><li>OB 链接：<code>![[img.png]]</code></li><li>MD 链接：<code>![img_name](img.png)</code></li></ul><p>两种格式我们都需要进行替换：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 定义正则表达式模式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\!\\[</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\]\\(</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jpg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jpeg</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\)</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\!\\[\\[</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jpg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jpeg</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\]\\]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 遍历当前文件夹下的所有Markdown文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> root, dirs, files </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">walk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> files:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.md&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 以utf-8编码读取Markdown文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             file_path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(root, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">             with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                 content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 使用正则表达式替换图片链接</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pattern1, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;![</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">](</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(match.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), img_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(match.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)), content)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pattern2, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;![</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">](</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(match.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), img_dict.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(match.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)), content)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ​</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 将替换后的内容写回Markdown文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">             with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file_path, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;w&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                 f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(content)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完脚本，我们会发现 Vault 内所有的内部图片都转换成了图床链接的形式。</p><figure><img src="https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前后对比</p><p>最后再强调一遍，<strong>执行以上操作前务必做好备份！以防操作失误无法挽回！</strong></p><hr><blockquote><p>作者：小小芋子</p><p>链接：<a href="https://zhuanlan.zhihu.com/p/489236769" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/489236769</a></p><p>来源：知乎</p></blockquote>`,124)]))}const r=s(t,[["render",h],["__file","GitHub-and-picGo-Deploy.html.vue"]]),g=JSON.parse('{"path":"/cloud/GitHub-and-picGo-Deploy.html","title":"使用 Github+picGo 搭建图床","lang":"zh-CN","frontmatter":{"title":"使用 Github+picGo 搭建图床","icon":"pic","order":2,"category":["安装教程"],"tag":["GitHub","picGo","Typora","Obsidian"],"description":"作者注：建议使用Github替换Gitee。 作者两年亲身体验告诉大家，Github做图床十分靠谱！！有CDN加速访问巨快！！ 别担心不稳定！别担心访问慢！这些问题统统不存在。 一、配置GitHub 1. 注册Github账号 首先你需要一个github账号，如果没有的话，先注册。 github官网地址： https://github.com/ 注册过...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/cloud/GitHub-and-picGo-Deploy.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"使用 Github+picGo 搭建图床"}],["meta",{"property":"og:description","content":"作者注：建议使用Github替换Gitee。 作者两年亲身体验告诉大家，Github做图床十分靠谱！！有CDN加速访问巨快！！ 别担心不稳定！别担心访问慢！这些问题统统不存在。 一、配置GitHub 1. 注册Github账号 首先你需要一个github账号，如果没有的话，先注册。 github官网地址： https://github.com/ 注册过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-59b7f87b4fbe21a2492e4b9e529fe87c_1440w.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-23T12:11:50.000Z"}],["meta",{"property":"article:tag","content":"GitHub"}],["meta",{"property":"article:tag","content":"picGo"}],["meta",{"property":"article:tag","content":"Typora"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:modified_time","content":"2025-01-23T12:11:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 Github+picGo 搭建图床\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-59b7f87b4fbe21a2492e4b9e529fe87c_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d3733c14e8c9b53cb5cf9f7607d51c8a_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4d227062bcfa58dba6c0582c982b737b_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4d227062bcfa58dba6c0582c982b737b_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-2d5bcabac97557591c4203009d306750_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-346da4ccf189eb5997abe2fadadca331_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-354ea85a4bd9cfc99157b86cae9a2332_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-279f576c0dc0861fd7edcf1d43e5675f_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-3f60ccb549e01c95a1702ceca9bda95d_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-62e4faaa7999d1d32fa80aec44b4034e_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-b5d16df86a9dd216d75e06b57ffb9c12_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-75f73b3c61eccc848c09c509ef51c6b8_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-79d759f28a769709c478f2fc7ca4b59f_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d4991c62c5e5733ed8d71ac0e214c687_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-72dc3cbb5136d7c49b691ace8d94444b_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-18f2eecd4f6c9c4091f5634dc041ca16_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-0a99d1f96cf97761ec0049ffb3d767a3_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-cd0242aaf5099ecd6371decfa6cc687a_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-d43f961421502cd473ea24dbfef8452b_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-4b1950c44d1a37a0497facfb55066501_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-ce0b207c19d6ca32ac22937f1dc6cfcd_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-f595cf5c8a0e3b62944c68deb8fb5878_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-e27e9f198aef7bdea365549b2257025d_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-8ff622935a6b0597a21e68e7575e16ef_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/v2-304589efaed9a1ba3caf5e8827e77582_1440w.webp\\",\\"https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp\\",\\"https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp\\"],\\"dateModified\\":\\"2025-01-23T12:11:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、配置GitHub","slug":"一、配置github","link":"#一、配置github","children":[{"level":3,"title":"1. 注册Github账号","slug":"_1-注册github账号","link":"#_1-注册github账号","children":[]},{"level":3,"title":"2. 创建一个新仓库，用于存放图片","slug":"_2-创建一个新仓库-用于存放图片","link":"#_2-创建一个新仓库-用于存放图片","children":[]},{"level":3,"title":"3. 生成一个token，用于picGo访问github","slug":"_3-生成一个token-用于picgo访问github","link":"#_3-生成一个token-用于picgo访问github","children":[]}]},{"level":2,"title":"二、下载picGo，并进行配置","slug":"二、下载picgo-并进行配置","link":"#二、下载picgo-并进行配置","children":[{"level":3,"title":"1. 下载picGo","slug":"_1-下载picgo","link":"#_1-下载picgo","children":[]},{"level":3,"title":"2. 配置picGo","slug":"_2-配置picgo","link":"#_2-配置picgo","children":[]},{"level":3,"title":"3. 补充说明","slug":"_3-补充说明","link":"#_3-补充说明","children":[]}]},{"level":2,"title":"三、备选-配置Gitee","slug":"三、备选-配置gitee","link":"#三、备选-配置gitee","children":[{"level":3,"title":"1. Gitee设置","slug":"_1-gitee设置","link":"#_1-gitee设置","children":[]},{"level":3,"title":"2. 创建私人令牌","slug":"_2-创建私人令牌","link":"#_2-创建私人令牌","children":[]},{"level":3,"title":"3. 在picgo中配置gitee图床","slug":"_3-在picgo中配置gitee图床","link":"#_3-在picgo中配置gitee图床","children":[]}]},{"level":2,"title":"四、PicGo集成Typora","slug":"四、picgo集成typora","link":"#四、picgo集成typora","children":[{"level":3,"title":"1. 下载安装Typora","slug":"_1-下载安装typora","link":"#_1-下载安装typora","children":[]},{"level":3,"title":"2. 配置Typora","slug":"_2-配置typora","link":"#_2-配置typora","children":[]},{"level":3,"title":"3. picGo监听端口设置","slug":"_3-picgo监听端口设置","link":"#_3-picgo监听端口设置","children":[]}]},{"level":2,"title":"五、picGo集成Obsidian - Paste Image Rename","slug":"五、picgo集成obsidian-paste-image-rename","link":"#五、picgo集成obsidian-paste-image-rename","children":[{"level":3,"title":"1. 效果综述","slug":"_1-效果综述","link":"#_1-效果综述","children":[]},{"level":3,"title":"2. 上传图片","slug":"_2-上传图片","link":"#_2-上传图片","children":[]},{"level":3,"title":"3. 替换文件引用链接","slug":"_3-替换文件引用链接","link":"#_3-替换文件引用链接","children":[]}]}],"git":{"createdTime":1737634310000,"updatedTime":1737634310000,"contributors":[{"name":"shenbourne","username":"shenbourne","email":"shenbourne@163.com","commits":1,"url":"https://github.com/shenbourne"}]},"readingTime":{"minutes":8.23,"words":2469},"filePathRelative":"cloud/GitHub-and-picGo-Deploy.md","localizedDate":"2025年1月23日","excerpt":"<blockquote>\\n<p>作者注：建议使用Github替换Gitee。</p>\\n<p>作者两年亲身体验告诉大家，Github做图床十分靠谱！！有CDN加速访问巨快！！</p>\\n<p>别担心不稳定！别担心访问慢！这些问题统统不存在。</p>\\n</blockquote>\\n<h2>一、配置GitHub</h2>\\n<h3>1. 注册Github账号</h3>\\n<p>首先你需要一个github账号，如果没有的话，先注册。</p>\\n<p>github官网地址：&nbsp;<a href=\\"https://link.zhihu.com/?target=https%3A//github.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/</a></p>","autoDesc":true}');export{r as comp,g as data};
